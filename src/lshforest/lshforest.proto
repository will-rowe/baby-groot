/*
compile with `protoc --go_out=. *.proto`
*/
syntax = "proto3";

package lshforest;

message LSHforest {
    int32 K = 1; // the size of a subsequence in a bucket
    int32 L = 2; // the number of buckets
    map<string, Key> KeyLookup = 3; // used to relate the stringified versions of a key to the original struct
    repeated Bucket Buckets = 4; // these sorted slices are equivalent to the prefix trees used in the LSH Forest paper
}


// Bucket is one tree of the LSH Forest
// it is an array of Pairs, where each Pair is a sketch fragment (subsequence) and the graph windows which has that sketch fragment (Key)
message Bucket {
    repeated Pair Pairs = 1;
}

message Pair {
    string SubSequence = 1; // this is empty until the index is needed, as protobuf3 doesn't like the non-UTF8 friendly encoding of the uint64s
    repeated string Keys = 2;    
    repeated uint64 SketchPartition = 3;
}

// Key relates sketches of reads and graph traversals to specific windows of a graph
message Key {
	uint32 GraphID = 1; // identifies the graph
	uint64 Node = 2; // identifies the first node in the graph window
	uint32 OffSet = 3; // identifies the offset of a window within the first node
	repeated uint64 SubPath = 4; // describes the traversal through the graph for the window
	uint32 Ref = 5; // the ID for the reference sequence that contains this window
	bool RC = 6; // identifies if the read has been reverse complemented (NOT USED)
    repeated uint64 Sketch = 7; // the sketch of this graph window
    double Freq = 8; // records the number of k-mers this graph window has received during read mapping
}